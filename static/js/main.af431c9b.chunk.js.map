{"version":3,"sources":["components/AppBar/AppBar.js","components/CountryCard/CountryCard.js","components/CountriesList/CountriesList.js","containers/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","index_es","variant","withStyles","card","maxWidth","media","height","classes","className","image","flag","title","component","name","CountriesList","countries","console","log","data","Array","Object","status","map","country","push","components_CountryCard_CountryCard","regions","Form","state","handleChange","e","_this","setState","target","value","toLocaleLowerCase","onSearchChange","fetch","concat","then","res","json","catch","err","_this2","this","_this3","form","onSubmit","preventDefault","id","label","type","textField","margin","onChange","select","SelectProps","native","helperText","option","key","components_CountriesList_CountriesList","Component","paddingTop","outLinedSearch","paddingLeft","App","AppBar","containers_Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af431c9b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withStyles, AppBar, Toolbar, Typography} from '@material-ui/core'\r\n\r\nconst Nav = (props) => {\r\n  return (\r\n    <div>\r\n      <AppBar>\r\n        <Toolbar>\r\n            <Typography variant='title'>\r\n                Countries\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\nimport {Card, CardActionArea, CardActions, CardContent, CardMedia, Button, Typography, withStyles} from '@material-ui/core'\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n};\r\n\r\nconst CountryCard = (props) => {\r\n\r\n  const { classes } = props\r\n  return (\r\n    <div>\r\n      <Card className={classes.card}>\r\n          <CardActionArea>\r\n          <CardMedia\r\n          className={classes.media}\r\n          image={props.flag}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n          </CardActionArea>\r\n          <CardContent>\r\n              <Typography variant='h5' component='h2'>\r\n                  {props.name}\r\n              </Typography>\r\n              <Typography component='p'>\r\n                More text about the texting text of a text\r\n              </Typography>\r\n          </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles)(CountryCard)\r\n","import React from 'react'\r\nimport CountryCard from '../CountryCard/CountryCard'\r\n\r\n\r\nconst CountriesList = (props) => {\r\n\r\n    let countries = [];\r\n    console.log(props.data, 'props data inside cou ntries list')\r\n    debugger\r\n    if(props.data instanceof Array || props.data instanceof Object && props.data.status!='404') {\r\n      \r\n        console.log(props.data, 'props data')\r\n        props.data.map(country => {\r\n            countries.push((\r\n                <CountryCard name={country.name} flag={country.flag} />\r\n            ))\r\n        })\r\n    } else {\r\n        countries.push((\r\n            <div>Man there's no such counry</div>\r\n        ))\r\n    }\r\n  return (\r\n    <div>\r\n        {countries}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountriesList\r\n","import React, { Component } from \"react\";\r\n\r\nimport { withStyles, TextField } from \"@material-ui/core\";\r\nimport CountriesList from \"../../components/CountriesList/CountriesList\";\r\nconst styles = {\r\n  form: {\r\n    paddingTop: \"75px\"\r\n  },\r\n  outLinedSearch: {\r\n    paddingLeft: \"50px\"\r\n  }\r\n};\r\n\r\nconst regions = [\"All\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"];\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    regions: \"all\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(`https://restcountries.eu/rest/v2/all`)\r\n      .then(res => res.json())\r\n      .then(res =>\r\n        this.setState({\r\n          regions: res\r\n        })\r\n      )\r\n      .then(res => console.log(this.state.regions, \"inside the res\"));\r\n    console.log(\"Component Did Mount\", this.state.regions);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.regions === \"all\" && this.state.regions != Object) {\r\n      console.log(\"Wohooooo I got updated IF STATEMENT\");\r\n      fetch(`https://restcountries.eu/rest/v2/all`)\r\n        .then(res => res.json())\r\n        .then(res =>\r\n          this.setState({\r\n            regions: res\r\n          })\r\n        );\r\n    } else if (\r\n      this.state.regions === \"africa\" ||\r\n      this.state.regions === \"asia\" ||\r\n      this.state.regions === \"americas\" ||\r\n      this.state.regions === \"europe\" ||\r\n      this.state.regions === \"oceania\"\r\n    ) {\r\n      console.log(\"Wohooooo I got updated ELSE statement\");\r\n      fetch(`https://restcountries.eu/rest/v2/region/${this.state.regions}`)\r\n        .then(res => res.json())\r\n        .then(res =>\r\n          this.setState({\r\n            regions: res\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      regions: e.target.value.toLocaleLowerCase()\r\n    });\r\n\r\n    console.log(this.state.regions);\r\n  };\r\n\r\n  onSearchChange = e => {\r\n   /* console.log(e.target.value.toLocaleLowerCase());\r\n    this.state.regions.map(country => {\r\n      if (\r\n        Object.values(country).includes(e.target.value) &&\r\n        e.target.value != \"\"\r\n      ) {\r\n        debugger;\r\n        fetch(\r\n          `https://restcountries.eu/rest/v2/name/${country.name.toLocaleLowerCase()}`\r\n        )\r\n          .then(res => res.json())\r\n          .then(res =>\r\n            this.setState({\r\n              regions: res\r\n            })\r\n          )\r\n          .then(res =>\r\n            console.log(this.state.regions, \"inside onsearchchange\")\r\n          );\r\n      }\r\n     }) ;*/ \r\n\r\n     fetch(`https://restcountries.eu/rest/v2/name/${e.target.value}`)\r\n     .then(res => res.json())\r\n     .then(res => {\r\n       this.setState({regions: res})\r\n     }).catch(err => console.log(err))\r\n\r\n\r\n\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.regions, \"render method\");\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.form}>\r\n        <form onSubmit={e => e.preventDefault()}>\r\n          <TextField\r\n            id=\"outlined-search\"\r\n            label=\"Search for a Country\"\r\n            type=\"search\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.onSearchChange}\r\n          />\r\n\r\n          <TextField\r\n            id=\"outlined-select-currency-native\"\r\n            select\r\n            label=\"Native select\"\r\n            // value={this.state.currency}\r\n            onChange={this.handleChange}\r\n            SelectProps={{\r\n              native: true\r\n            }}\r\n            helperText=\"Please select your currency\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n          >\r\n            {regions.map(option => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n        </form>\r\n        <CountriesList data={this.state.regions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Form);\r\n","import React from 'react'\r\n\r\nimport Navigation from '../src/components/AppBar/AppBar'\r\nimport Form from './containers/Form/Form'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <Form />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}