{"version":3,"sources":["components/UI/Toolbar/Nav.js","components/CountryCard/CountryCard.js","components/CountryCardList/CountryCardList.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","react","index_es","withStyles","card","maxWidth","marginTop","media","height","props","classes","console","log","country","className","image","flag","title","gutterBottom","variant","component","name","size","color","CountryCardList","countries","map","push","Grid_default","item","xs","components_CountryCard_CountryCard","CountriesList","state","_this2","this","fetch","then","res","json","setState","catch","err","container","spacing","wrap","Toolbar_Nav","components_CountryCardList_CountryCardList","Component","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAoBeA,EAfH,WAEV,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,sECuCDC,uBA9CA,CACXC,KAAM,CACJC,SAAU,IACVC,UAAW,IAEbC,MAAO,CACLC,OAAQ,MAwCCL,CApCK,SAACM,GAAU,IACnBC,EAAYD,EAAZC,QAEV,OADEC,QAAQC,IAAI,0BAA2BH,EAAMI,SAI7Cf,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMY,UAAWJ,EAAQN,MACzBN,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEY,UAAWJ,EAAQH,MACnBQ,MAAON,EAAMO,KACbC,MAAM,0BAERnB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYgB,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7CX,EAAMY,MAETvB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYkB,UAAU,KAAtB,mIAMJtB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQoB,KAAK,QAAQC,MAAM,WAA3B,SAGAzB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQoB,KAAK,QAAQC,MAAM,WAA3B,mCCfSC,EAvBS,SAAAf,GACtB,IAAIgB,EAAY,GAmBhB,OAlBIhB,EAAMgB,UACRhB,EAAMgB,UAAUC,IAAI,SAAAb,GAClBY,EAAUE,KACR7B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAM8B,MAAI,EAACC,GAAI,GACjBhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAMV,KAAMR,EAAQQ,KAAML,KAAMH,EAAQG,YAM9CS,EACE3B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,iBAKCF,EAAAC,EAAAC,cAACC,EAAA,SAAD,KAAWwB,ICWLO,6MA7BbC,MAAQ,CACNR,UAAW,yFAGO,IAAAS,EAAAC,KAClBC,MAAM,wCAAwCC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAC7DF,KAAK,SAAAC,GACJJ,EAAKM,SAAS,CACZf,UAAWa,IAEb3B,QAAQC,IAAIsB,EAAKD,MAAMR,aAExBgB,MAAM,SAAAC,GACL/B,QAAQC,IAAI8B,sCAId,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAM4C,WAAS,EAACC,QAAU,GAAIC,MAAI,GAClC/C,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAiBtB,UAAaU,KAAKF,MAAMR,qBAtBrBuB,aCSbC,UARH,WACV,OACEnD,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACfhB,EAAAC,EAAAC,cAACkD,EAAD,SCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.3735ddbe.chunk.js","sourcesContent":["import {  Fragment } from 'react'\r\nimport React from 'react'\r\n\r\nimport { withStyles, AppBar, Toolbar, Typography} from '@material-ui/core'\r\n\r\nconst Nav = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n        <AppBar>\r\n            <Toolbar>\r\n                <Typography>\r\n                    Countries\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\n\r\nimport { withStyles, Card, CardActionArea, CardActions, CardContent, CardMedia, Button, Typography,Grid} from '@material-ui/core'\r\n\r\nconst styles = {\r\n    card: {\r\n      maxWidth: 280,\r\n      marginTop: 80\r\n    },\r\n    media: {\r\n      height: 180,\r\n    },\r\n  };\r\n\r\nconst CountryCard = (props) => {\r\n    const { classes } = props;\r\n    console.log('this is inside the card', props.country)\r\n  return (\r\n      \r\n\r\n    <Card className={classes.card}>\r\n    <CardActionArea>\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.flag}\r\n        title=\"Contemplative Reptile\"\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {props.name}\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n          across all continents except Antarctica\r\n        </Typography>\r\n      </CardContent>\r\n    </CardActionArea>\r\n    <CardActions>\r\n      <Button size=\"small\" color=\"primary\">\r\n        Share\r\n      </Button>\r\n      <Button size=\"small\" color=\"primary\">\r\n        Learn More\r\n      </Button>\r\n    </CardActions>\r\n  </Card>\r\n\r\n  )\r\n}\r\n\r\nexport default withStyles(styles)(CountryCard)\r\n","import React, { Fragment } from \"react\";\r\nimport Card from \"../CountryCard/CountryCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nconst CountryCardList = props => {\r\n  let countries = [];\r\n  if (props.countries) {\r\n    props.countries.map(country => {\r\n      countries.push(\r\n        <Fragment>\r\n            <Grid item xs={3}>\r\n          <Card name={country.name} flag={country.flag} />\r\n          </Grid>\r\n        </Fragment>\r\n      );\r\n    });\r\n  } else {\r\n    countries = (\r\n      <Fragment>\r\n        <h1>no</h1>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  return <Fragment>{countries}</Fragment>;\r\n};\r\n\r\nexport default CountryCardList;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Toolbar from \"../../components/UI/Toolbar/Nav\";\r\nimport CountryCardList from '../../components/CountryCardList/CountryCardList'\r\nimport Grid from '@material-ui/core/Grid'\r\nclass CountriesList extends Component {\r\n  state = {\r\n    countries: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('https://restcountries.eu/rest/v2/all').then(res => res.json())\r\n    .then(res => {\r\n      this.setState({\r\n        countries: res\r\n      })\r\n      console.log(this.state.countries)\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container spacing= {24} wrap>\r\n        <Toolbar />\r\n        <CountryCardList countries = {this.state.countries}/>\r\n        </Grid>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountriesList;\r\n","import React from 'react'\nimport Toolbar from './components/UI/Toolbar/Nav'\nimport Layout from './containers/Layout/Layout'\nimport Grid from '@material-ui/core/Grid'\nimport './App.css'\nconst App = () => {\n  return (\n    <div className='App'>\n    <Layout />\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}